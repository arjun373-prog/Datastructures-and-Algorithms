Sometimes you need to store a list of elements in memory. Suppose you’re writing an app to manage your todos. You’ll want to store the todos as a list in memory.
Should you use an array, or a linked list?
Using an array means all your tasks are stored contiguously (right next to each other) in memory. Now suppose you want to add a fourth task. But the next drawer is 
taken up by someone else’s stuff! In this case, you need to ask your computer for a different chunk of memory that can fit four tasks. 
Then you need to move all your tasks there. If you’re out of space and need to move to a new spot in memory every time, adding a new item will be really slow. 
One easy fix is to “hold seats”: even if you have only 3 items in your task list, you can ask the computer for 10 slots, just in case. Then you can 
add 10 items to your task list without having to move. 
This is a good workaround, but you should be aware of a couple of downsides:

• You may not need the extra slots that you asked for, and then that memory will be wasted. You aren’t using it, but no one else can use it either.
• You may add more than 10 items to your task list and have to move anyway.So it’s a good workaround, but it’s not a perfect solution. 
Linked lists solve this problem of adding items. 

* Linked lists:
---------------
With linked lists, your items can be anywhere in memory. Each item stores the address of the next item in the list. A bunch of random memory addresses are linked together.
It’s like a treasure hunt. You go to the first address, and it says, “The next item can be found at address 123.” So you go to address 123, and it says, 
“The next item can be found at address 847,” and so on. Adding an item to a linked list is easy: you stick it anywhere in memory and store the address with the previous item.

--If there’s space in memory, you have space for your linked list.
If linked lists are so much better at inserts, what are arrays good for?

*Arrays:
-------
Websites with top-10 lists use a scummy tactic to get more page views. Instead of showing you the list on one page, they put one item on each page and make you 
click Next to get to the next item in the list. This technique gives the websites 10 whole pages on which to show you ads, but it’s boring to click Next 9 
times to get to #1. 
Linked lists have a similar problem. Suppose you want to read the last item in a linked list. You can’t just read it, because you don’t know what address it’s at.
Linked lists are great if you’re going to read all the items one at a time: you can read one item, follow the address to the next item, and so on. 
But if you’re going to keep jumping around, linked lists are terrible.

Arrays are different.Arrays are great if you want to read random elements, because you can look up any element in your array instantly. 
With a linked list, the elements aren’t next to each other, So you can’t instantly calculate the position of the fifth element in memory.

            Arrays | Linked lists
---------------------------------
Reading       O(1) | O(n)
---------------------------------
Insertion     O(n) | O(1)*
---------------------------------
Deletions     O(n) | O(1)*

* The cost to add or delete an element into a known location in the list 
   (i.e. if you have an iterator to the location) is O(1). If you don't 
   know the location, then you need to traverse the list to the location
   of deletion/insertion, which takes O(n) time.

O(n) --> Linear Time
O(1) --> Constant Time
--------------------------------------------------
Question: Why does it take O(n) time to insert an element into an array? Suppose you wanted to insert an element at the beginning of an array.
          How would you do it? How long would it take?
-----------------------------------  

Inserting into the middle of a list:
-----------------------------------
What’s better if you want to insert elements in the middle: arrays or lists? 
With lists, it’s as easy as changing what the previous element points to.
But for arrays, you have to shift all the rest of the elements down.
And if there’s no space, you might have to copy everything to a new location! 
Lists are better if you want to insert elements into the middle. 


Deletions:
-----------
What if you want to delete an element? Again, lists are better, because you just need to change what the previous element points to. 
With arrays, everything needs to be moved up when you delete an element.
Unlike insertions, deletions will always work. Insertions can fail sometimes when there’s no space left in memory. But you can always delete an element.


It’s worth mentioning that insertions and deletions are O(1) time only if you can instantly access the element to be deleted. 
It’s a common practice to keep track of the first and last items in a linked list, so it would take only O(1) time to delete those.

Which are used more: arrays or lists? Obviously, it depends on the use case. But arrays see a lot of use because they allow random access. There 
are two different types of access: random access and sequential access. Sequential access means reading the elements one by one, starting at the first element. 
Linked lists can only do sequential access. If you want to read the 10th element of a linked list, you have to read the first 
9 elements and follow the links to the 10th element. Random access means you can jump directly to the 10th element. A lot of use cases require random access, \
so arrays are used a lot. Arrays and lists are used to implement other data structures, too...





