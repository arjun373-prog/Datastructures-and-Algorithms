Suppose you have a bunch of music on your computer. For each artist, you have a play count.
You want to sort this list from most to least played, so that you can rank your favorite artists. How can you do it?

One way is to go through the list and find the most-played artist. Add that artist to a new list. Do it again to find the next-most-played artist.
Keep doing this, and you’ll end up with a sorted list.

Remember that O(n) time means you touch every element in a list once. For example, running simple search over the list of artists means looking at each artist once.
To find the artist with the highest play count, you have to check each item in the list. This takes O(n) time, as you just saw. 
So you have an operation that takes O(n) time, and you have to do that n times.This takes O(n × n) time or O(n^2) time.
Sorting algorithms are very useful. Now you can sort
• Names in a phone book
• Travel dates
• Emails (newest to oldest)

Selection sort is a neat algorithm, but it’s not very fast. Quicksort is a faster sorting algorithm that only takes O(n log n) time.

---------------------------
EXAMPLE CODE

def findSmallest(arr): 
   smallest = arr[0]    #Stores the smallest value 
   smallest_index = 0    #Stores the index of the smallest value
   for i in range(1, len(arr)):
      if arr[i] < smallest:
        smallest = arr[i]
        smallest_index = i
   return smallest_index

Now you can use this function to write selection sort:

def selectionSort(arr):     #Sorts an array
   newArr = []
   for i in range(len(arr)):
      smallest = findSmallest(arr)
      newArr.append(arr.pop(smallest))
   return newArr
print selectionSort([5, 3, 6, 2, 10])
--------------------------------------------

Checking fewer elements each time:

Maybe you’re wondering: as you go through the operations, the number 
of elements you have to check keeps decreasing. Eventually, you’re down 
to having to check just one element. So how can the run time still be O(n^2)?

That’s a good question, and the answer has to do with constants in Big O notation.
You’re right that you don’t have to check a list of n elements each time. 
You check n elements, then n – 1, n - 2 … 2, 1. On average, you check a list that has 1/2 × n elements. The runtime is O(n × 1/2 × n). 
But constants like 1/2 are ignored in Big O notation , so you just write O(n × n) or O(n^2).




