Binary search is an algorithm; its input is a sorted list of elements . If an element you’re looking for is in that list, binary search returns the position 
where it’s located. Otherwise, binary search returns null.

For any list of n, binary search will take log2 n steps to run in the worst case, whereas simple search will take n steps. (log base2)
For a list of 1,024 elements, log2 1,024 = 10, because 2^10 == 1,024. So for a list of 1,024 numbers, you’d have to check 10 numbers at most.

log10 100 is like asking, “How many 10s do we multiply together to get 100?” The answer is 2: 10 × 10. So log10 100 = 2. Logs are the flip of exponentials.

Note: Binary search only works when your list is in sorted order. 
---------------------------------------
Implementation in python:

The binary_search function takes a sorted array and an item. If the item is in the array, the function returns its position.
You’ll keep track of what part of the array you have to search through. At the beginning, this is the entire array:

low = 0
high = len(list) - 1

Each time, you check the middle element:
mid = (low + high) / 2   # mid is rounded down by Python automatically if (low + high) isn’t an even number.
guess = list[mid]
If the guess is too low, you update low accordingly:
if guess < item:
 low = mid + 1
 
And if the guess is too high, you update high. Here’s the full code:
def binary_search(list, item):   
  low = 0                          # low and high keep track of which part of the list you’ll search in.
  high = len(list)—1 
  while low <= high:               # While you haven’t narrowed it down to one element …
    mid = (low + high)/2           # … check the middle element.
    guess = list[mid]
    if guess == item:              # Found the item.
      return mid
    if guess > item:               # The guess was too high.
      high = mid - 1
    else:                          # The guess was too low.
      low = mid + 1
 return None                       # The item doesn’t exist
 

my_list = [1, 3, 5, 7, 9] 
print binary_search(my_list, 3) # => 1     #Remember, lists start at 0. The second slot has index 1.
print binary_search(my_list, -1) # => None    #“None” means nil in Python. It indicates that the item wasn’t found.




EXERCISES
1.1 Suppose you have a sorted list of 128 names, and you’re searching 
through it using binary search. What’s the maximum number of 
steps it would take?

Ans: 7

1.2 Suppose you double the size of the list. What’s the maximum 
number of steps now?

Ans: 8



Back to binary search. How much time do you save by using it? 
Well, the first approach was to check each number, one by one. If this is a list of 100 numbers, it takes up to 100 guesses. 
If it’s a list of 4 billion numbers, it takes up to 4 billion guesses. So the maximum number of guesses is the same as the size of the list. 
This is called linear time.
Binary search is different. If the list is 100 items long, it takes at most 7 guesses. If the list is 4 billion items, it takes at most 32 guesses. 
Powerful, eh? Binary search runs in logarithmic time (or log time, as the natives call it).

